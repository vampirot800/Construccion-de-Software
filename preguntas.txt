¿Por qué es una buena práctica usar JavaScript para checar que sean válidos los inputs de las formas antes de enviar los datos al servidor?
-permite una experiencia de usuario más fluida al validar los datos del formulario en el navegador antes de enviarlos al servidor. Esto puede ayudar a reducir la carga en el servidor al evitar enviar datos incorrectos o incompletos.


¿Cómo puedes saltarte la seguridad de validaciones hechas con JavaScript?
-e puede saltar la seguridad de las validaciones de JavaScript deshabilitando o modificando el código del cliente en el navegador, utilizando herramientas de desarrollo del navegador para modificar el comportamiento de los eventos o enviando directamente solicitudes HTTP al servidor sin utilizar el formulario.q

Si te puedes saltar la seguridad de las validacionesde JavaScript, entonces ¿por qué la primera pregunta dice que es una buena práctica?
- La validación en el cliente proporciona una experiencia de usuario más rápida y receptiva, pero siempre debe ser complementada con validaciones en el servidor para garantizar la seguridad y la integridad de los datos. La combinación de validaciones en el cliente y en el servidor proporciona una defensa más robusta contra ataques maliciosos y garantiza que los datos recibidos por el servidor sean válidos y seguros.

Describe el archivo package.json:
name: El nombre del proyecto.
version: La versión actual del proyecto.
description: Una descripción opcional del proyecto.
main: El archivo principal del proyecto, que en este caso es app.js.
scripts: Define comandos de scripts que pueden ser ejecutados con npm, como el comando start que ejecuta nodemon app.js.
keywords: Palabras clave que describen el proyecto, usadas para buscar y clasificar el proyecto.
author: El autor o autores del proyecto.
license: La licencia bajo la cual se distribuye el proyecto, en este caso, ISC.
dependencies: Las dependencias del proyecto que son necesarias para que funcione, como express, body-parser, bootstrap, cookie-parser y gridjs.
devDependencies: Dependencias específicas de desarrollo que solo se necesitan durante el desarrollo, como nodemon.